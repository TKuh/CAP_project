# SPDX-License-Identifier: GPL-2.0-or-later
# CAP: Categories, Algorithms, Programming
#
# Implementations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE LimitConvenience.gi
##
InstallMethod( DirectProductFunctorial,
               [ IsList ],
               
  function( L )
    
    return DirectProductFunctorialWithGivenDirectProducts(
        DirectProduct( List( L, Source ) ),
        L,
        DirectProduct( List( L, Range ) )
    );
    
end );

##
InstallMethod( CoproductFunctorial,
               [ IsList ],
               
  function( L )
    
    return CoproductFunctorialWithGivenCoproducts(
        Coproduct( List( L, Source ) ),
        L,
        Coproduct( List( L, Range ) )
    );
    
end );

##
InstallMethod( DirectSumFunctorial,
               [ IsList ],
               
  function( L )
    
    return DirectSumFunctorialWithGivenDirectSums(
        DirectSum( List( L, Source ) ),
        L,
        DirectSum( List( L, Range ) )
    );
    
end );

##
InstallMethod( FiberProductFunctorial,
               [ IsList, IsList, IsList ],
               
  function( morphisms, L, morphismsp )
    
    return FiberProductFunctorialWithGivenFiberProducts(
        FiberProduct( morphisms ),
        morphisms, L, morphismsp,
        FiberProduct( morphismsp )
    );
    
end );

##
InstallMethod( PushoutFunctorial,
               [ IsList, IsList, IsList ],
               
  function( morphisms, L, morphismsp )
    
    return PushoutFunctorialWithGivenPushouts(
        Pushout( morphisms ),
        morphisms, L, morphismsp,
        Pushout( morphismsp )
    );
    
end );

##
InstallMethod( EqualizerFunctorial,
               [ IsList, IsCapCategoryMorphism, IsList ],
               
  function( morphisms, mu, morphismsp )
    
    return EqualizerFunctorialWithGivenEqualizers(
        Equalizer( morphisms ),
        morphisms, mu, morphismsp,
        Equalizer( morphismsp )
    );
    
end );

##
InstallMethod( CoequalizerFunctorial,
               [ IsList, IsCapCategoryMorphism, IsList ],
               
  function( morphisms, mu, morphismsp )
    
    return CoequalizerFunctorialWithGivenCoequalizers(
        Coequalizer( morphisms ),
        morphisms, mu, morphismsp,
        Coequalizer( morphismsp )
    );
    
end );

##
InstallMethod( KernelObjectFunctorial,
               [ IsCapCategoryMorphism, IsCapCategoryMorphism, IsCapCategoryMorphism ],
               
  function( alpha, mu, alphap )
    
    return KernelObjectFunctorialWithGivenKernelObjects(
        KernelObject( alpha ),
        alpha, mu, alphap,
        KernelObject( alphap )
    );
    
end );

##
InstallMethod( CokernelObjectFunctorial,
               [ IsCapCategoryMorphism, IsCapCategoryMorphism, IsCapCategoryMorphism ],
               
  function( alpha, mu, alphap )
    
    return CokernelObjectFunctorialWithGivenCokernelObjects(
        CokernelObject( alpha ),
        alpha, mu, alphap,
        CokernelObject( alphap )
    );
    
end );
