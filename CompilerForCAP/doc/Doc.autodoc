@Chapter Using the compiler

**WARNING**: This package is still in alpha and not tested or validated extensively!

@Section Terminology

The compiler is a just-in-time compiler, that is, it needs some arguments to infer types of variables. These arguments
are refered to as __JIT arguments__. For a given CAP operation, these are usually the arguments of the first
call of the operation.

The compiler uses GAP's syntax trees for optimizing functions. The term __tree__ always refers to the syntax tree of
the function to be compiled. Note that a node of the tree always knows its children, so technically it is also a tree.
That is, the terms __tree__, __subtree__, and __node__ technically describe the same thing but we use them for different
emphases.

We often replace a node in the tree by another tree representing the "value" of the original node. Examples:
* Replace a global variable referencing an integer, a string, or a boolean by EXPR_INT, EXPR_STRING, EXPR_TRUE or EXPR_FALSE.
* Replace a global variable referencing a plain function by the syntax tree of this function.
* Replace a record access of a global function by the value of this record access.
* Replace an operation by a concrete method.
We call this __resolving__ the global variable, operation, etc. Note that this does not change the basic "layout" of the tree.

On the contrary, in the following examples we change the "layout" of the tree:
* If we have a function call of a resolved function, we can assign the argument values to local variables at the
    beginning of the function. This way we can avoid passing arguments completely.
* If a function call of a resolved function occurs in the right hand side of a variable assignment, we can insert the body of the
    resolved function right before the variable assignment. This way we can avoid the function call.
* We can replace all references to a local variable by the right hand side of the variable assignment and then drop the assignment.
We call this __inlining__ the function arguments, functions, or variable assignments.

@Section Capabilities of the compiler

The compilation process has two phases: the resolving phase and the rule phase.

During the resolving phase, operations and global variables are resolved:
* An operation is resolved by executing the function to be compiled with the JIT arguments to determine the arguments of the operation.
  These arguments are used to call `ApplicableMethod`, and methods annotated with the pragma `CAP_JIT_RESOLVE_FUNCTION` are resolved.
* CAP operations are handled separately: instead of using `ApplicableMethod`, the functions added to the category via `Add` functions
  are considered, and those do not have to be annotated with `CAP_JIT_RESOLVE_FUNCTION`. In particular, caching, pre functions, etc.
  are bypassed.
* References to global functions are resolved if the function is annotated with the pragma `CAP_JIT_RESOLVE_FUNCTION`.
For details see <Ref Func="CapJitResolvedOperations" /> and <Ref Func="CapJitResolvedGlobalVariables" />.
If no operation or global variable can be resolved anymore, we continue with the rule phase.

In the rule phase, the tree is optimized using several rules and techniques. Function arguments, functions, and assignments to local
variables are inlined. Unused variables are dropped. Handled edge cases are dropped, that is, if the same edge case is caught multiple times
via `if condition then return ...; fi;` statements, only the first such statement is kept. Finally, "logic" is applied to the tree.
For example, calls of `CallFuncList` are replaced by calls to the actual function. The logic can be extended by the user, see chapter
<Ref Chap="Chapter_ImprovingAndExtendingTheCompiler" />.

For all details, see the list of compilations steps in <Ref Sect="Section_CompilationSteps" />.

@Section Requirements

There are three main requirements for the steps described above to be correct:
* The code must not depend on side effects (otherwise dropping "unused" variables or inlining variables could change results).
  See <Ref Func="CapJitThrowErrorOnSideEffects" /> for details.
* The methods selected for the operations during the resolving phase must be independent of the JIT arguments, that is,
  they must yield correct results for all allowed arguments of the function to be compiled. Thus, be careful which methods
  you annotate with `CAP_JIT_RESOLVE_FUNCTION`. In particular, the CAP categories of objects and morphisms appearing during the
  execution must be independent of the JIT arguments.
* All results of applications of filters in logic templates must be independent of the JIT arguments.
  Thus, be careful when adding new logic templates.

There is an additional weak requirement: The compiler mainly optimizes the code paths covered when executing the function with the
JIT arguments. Thus, the JIT arguments should represent a "generic" call, i.e., they should not run into edge cases which do not happen
with a "generic" call. Still, the execution using JIT arguments should be fast to improve compilation times.

@Section Activating the compiler

You can activate the compiler by passing the option `enable_compilation` to any category constructor.
If `enable_compilation` is set to `true`, any basic operation will be compiled when called for the first time.
If `enable_compilation` is a list of strings, compilation will only happen if the function name
of the basic operation appears in this list.

@Section Stopping the compiler at a certain level

You can use `StopCompilationAtCategory` to prevent the compiler from inlining and optimizing code of a given category.
You can revert this decision using `ContinueCompilationAtCategory`.

@Section Getting information about the compilation process

You can increase the info level of `InfoCapJit` to get information about the compilation process.

@Section Compiling a function manually

Use <Ref Func="CapJitCompiledFunction" /> to compile a function `func` with JIT arguments `jit_args`.
`jit_args` should represent a "generic" call, i.e., they should not run into edge cases which do not happen with a "generic" call.
Still, the execution using `jit_args` should be fast to improve compilation times.

@Section FAQ

* Q: Why is my function not resolved?
A: Only functions annotated with the pragma `CAP_JIT_RESOLVE_FUNCTION` are resolved. Additionally, a function can only be resolved
if it appears as a global variable in the tree during the resolving phase of the compilation. That is, it must be referenced from
a global variable from the beginning on, or after global variables are resolved by <Ref Func="CapJitResolvedGlobalVariables" />.
Possibly you have adapt <Ref Func="CapJitResolvedGlobalVariables" /> to your setting.

* Q: Why is my operation not resolved?
A: The compiler must be able to get the arguments of the call of the operation from the JIT arguments.
Then the rules in the description of <Ref Func="CapJitResolvedOperations" /> apply.

* Q: Why do I get the error "cannot find iteration key"?
A: For each syntax tree node type, the tree iterator has to know which record names it should use for continuing the iteration.
Please add the missing keys to `CAP_INTERNAL_JIT_ITERATION_KEYS`.

* Q: Why do I get the error "tree has no kown type" when calling <Ref Func="CapJitPrettyPrintSyntaxTree" />?
A: <Ref Func="CapJitPrettyPrintSyntaxTree" /> needs to handle every syntax tree node type separately.
Please add the missing type to <Ref Func="CapJitPrettyPrintSyntaxTree" />.

* Q: Why is do I get the error "a local variable with name &lt;name&gt; is assigned more than once (not as a part of a rapid reassignment),
  this is not supported"?
A: For reasons of correctness, variables cannot be inlined if a variable is assigned more than once in the body of a function
(this includes function arguments which are assigned at least once, namely when the function is called). An exception is made for
"rapid reassignments": if the same variable is assigned and then reassigned immediately in the next statement, this only counts
as a single assignment.

* Q: Why do I get one of the following errors: "tree includes statements or expressions which indicate possible side effects",
  "tree contains an assignment of a higher variable with initial name &lt;name&gt;, this is not supported", or
  "tree contains for loop over non-local variable, this is not supported" ?
A: We can only drop unused variables, inline variables, etc. if we assume that the code contains no side effects. Statements like
STAT_PROCCALL or assignment to higher variables cause (or at least indicate) side effects, so continuing with the compilation
would probably not lead to a correct result.

@Chapter Improving and extending the compiler
@ChapterLabel ImprovingAndExtendingTheCompiler

The easiest way to extend the compiler is by adding more logic to it, see <Ref Sect="Section_Logic" />. For writing logic functions
you also have to iterate over enhanced syntax trees, see <Ref Sect="Section_EnhancedSyntaxTrees" /> and <Ref Sect="Section_IterateOverTree" />.
You might also want to use available tools, see <Ref Sect="Section_Tools" />. If you want to improve an existing compilation step or add
a completely new one, see <Ref Sect="Section_CompilationSteps" />.

For debugging you can:
* use <Ref Func="CapJitPrettyPrintSyntaxTree" />,
* set `debug` to `true` in <Ref Func="CapJitCompiledFunction" /> (Note: this causes informational break loops which are not actual errors),
* use the `debug` and `debug_path` record entries of logic templates (see <Ref Func="CapJitAddLogicTemplate" />).

@Section Logic
@SectionLabel Logic

@Section Enhanced syntax trees
@SectionLabel EnhancedSyntaxTrees

To simplify the handling of syntax trees, the CAP compiler enhances syntax trees in the following ways:
* All node types starting with STAT_SEQ_STAT are replaced by STAT_SEQ_STAT.
* All node types starting with EXPR_FUNCCALL_ are replaced by EXPR_FUNCCALL.
* All node types starting with EXPR_PROCCALL_ are replaced by EXPR_PROCCALL.
* All node types starting with STAT_FOR are replaced by STAT_FOR.
* Nested STAT_SEQ_STATs are flattened.
* A final STAT_RETURN_VOID in functions is dropped.
* Branches of STAT_IF etc. are given the type BRANCH_IF.
* If the body of a BRANCH_IF is not a STAT_SEQ_STAT, the body is wrapped in a STAT_SEQ_STAT.
* The key-value pairs of EXPR_RECs are given the type REC_KEY_VALUE_PAIR.
* A globally unique ID is assigned to each function.
* The handling of local variables and higher variables is unified by the concept of function variables:
  function variables (FVARs) reference local variables in functions via the function id (`func_id`) and
  the position (`pos`) in the list of arguments/local variables of the function.
  For easier debugging, the name of the local variable is stored in the entry `initial_name` of the FVAR.

@Section Iterating over a syntax tree
@SectionLabel IterateOverTree

@Section Tools
@SectionLabel Tools

@Section Compilation steps
@SectionLabel CompilationSteps

@Chapter Examples and tests

@Section Examples

@Section Tests

