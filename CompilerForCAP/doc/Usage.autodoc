@Chapter Using the compiler

@Section Terminology

The compiler was started as a just-in-time compiler, that is, it needed some arguments to infer types of variables.
Although the compiler now supports precompilation and type signatures can be explicitly given, it still is a just-in-time compiler in the following sense:
Only methods for operations getting a CAP category as the first argument can be found by the compiler,
and an instance of a CAP category is needed for method selection.

The compiler uses GAP's syntax trees for optimizing functions. The term __tree__ always refers to the syntax tree of
the function to be compiled. Note that a node of the tree always knows its children, so technically it is also a tree.
That is, the terms __tree__, __subtree__, and __node__ technically describe the same thing but we use them for different
emphases.

We often replace a node in the tree by another tree representing the "value" of the original node. Examples:
* Replace a global variable referencing an integer, a string, or a boolean by EXPR_INT, EXPR_STRING, EXPR_TRUE or EXPR_FALSE.
* Replace a global variable referencing a plain function by the syntax tree of this function.
* Replace a record access of a global function by the value of this record access.
* Replace an operation by a concrete method.
We call this __resolving__ the global variable, operation, etc. Note that this does not change the basic "layout" of the tree.

On the contrary, in the following examples we change the "layout" of the tree:
* If we have a function call of a resolved function, we can assign the argument values to local variables at the
    beginning of the function. This way we can avoid passing arguments completely.
* If a function call of a resolved function occurs in the right hand side of a variable assignment, we can insert the body of the
    resolved function right before the variable assignment. This way we can avoid the function call.
* We can replace all references to a local variable by the right hand side of the variable assignment and then drop the assignment.
We call this __inlining__ the function arguments, functions, or variable assignments.

@Section Capabilities of the compiler

The compilation process has two phases: the resolving phase and the rule phase.

During the resolving phase, operations and global variables are resolved.
* CAP operations can only be resolved if an instance of a CAP category to which the operation is applied is known.
  Then, the functions added to the category via `Add` functions are considered.
  Note that caching, pre functions, etc. are bypassed.
* You can also use `InstallMethodForCompilerForCAP` or `InstallOtherMethodForCompilerForCAP` (see the documentation of CAP) to make methods
  which accept a CAP category as the first argument known to the compiler. The same restrictions as for CAP operations apply.
* References to global functions are resolved if the function name is not listed in `CAP_JIT_NON_RESOLVABLE_GLOBAL_VARIABLE_NAMES` and
  if the function is annotated with the pragma `CAP_JIT_RESOLVE_FUNCTION`.
* If a call of a global function or operation (occuring as the right hand side of a variable assignment or as the return value of a function)
  is annotated with the pragma `CAP_JIT_NEXT_FUNCCALL_DOES_NOT_RETURN_FAIL`, the compiler assumes that the resolved function never returns `fail`
  and thus simply removes any code of the form `if condition then return fail; fi;` (or similar) from the resolved function.
  The pragma has to be placed right before the variable assignment or the return statement.
* If the pragma `CAP_JIT_DROP_NEXT_STATEMENT` occurs in the resolved function, the statement following the pragma is removed.
For details see <Ref Func="CapJitResolvedOperations" /> and <Ref Func="CapJitResolvedGlobalVariables" />.
If no operation or global variable can be resolved anymore, we continue with the rule phase.

In the rule phase, the tree is optimized using several rules and techniques. Function arguments, functions, and assignments to local
variables are inlined. Unused variables are dropped. Handled edge cases are dropped, that is, if the same edge case is caught multiple times
via `if condition then return ...; fi;` statements, only the first such statement is kept. Finally, "logic" is applied to the tree.
For example, calls of `CallFuncList` are replaced by calls to the actual function. The logic can be extended by the user, see chapter
<Ref Chap="Chapter_ImprovingAndExtendingTheCompiler" />.

For all details, see the list of compilations steps in <Ref Sect="Section_CompilationSteps" />.

@Section Requirements

There are some requirements for the steps described above to be correct:
* The code must not depend on side effects (otherwise dropping "unused" variables or inlining variables could change results).
* Technically, the result is only valid for the concrete CAP category which was used to resolve CAP operations and get typing information.
  That is, for parametric categories you must check manually for which parameters the result is valid.
* Only assignments to local variables, if/elif/else statements, and return statements are allowed as statements in functions.
* All branches of any given if/elif/else statement must end with a return statement or the assignment to the same local variable.
* If statements must always have an else statement, except if all branches end with a return statement. In the latter case, the
  statements following the if statement are automatically put into an else statement.
* Nested if/elif/else statements are not allowed.
* Function arguments or local variables must not be called `RETURN_VALUE`, as this name is used internally.
* Local variables must be assigned at most once (this includes function arguments, which are assigned at least once,
  namely when the function is called). An exception is made for "rapid reassignments": if the same variable
  is assigned and then reassigned immediately in the next statement, this only counts as a single assignment.
* Since the compiler might change the order of statements, checking if a local variable (or list entry etc.) is bound is not safe.
* For performance optimizations, the compiler might move expressions out of if/else statements, e.g. if they occur inside a (potentially
  expensive) `List` call. Thus, code inside if/else statements must execute without error even if moved outside of the if/else statement.
* Non-dense lists are not supported.

Additionally, there is no detection for recursive function calls, so resolving such a function call leads to an infinite loop.

@Section Precompiling categories

The main mode of application of the compiler is precompiling categories and storing the result in a file for later use via <Ref Func="CapJitPrecompileCategory" />.

@Section Compiling a function manually

One can also compile a function `func` manually via <Ref Func="CapJitCompiledFunction" />.

@Section Giving hints to the compiler
@SectionLabel CompilerHints

You can give hints to the compiler to improve the result of the compilation. Compiler hints are attached to the category by making
`category!.compiler_hints` a record with one or more of the following keys:
* `category_attribute_names`: a list of names of attributes of the category. If a global variable in the compiled code has the same value (w.r.t. `IsIdenticalObj`)
                              as one of the given attributes of the category, the global variable is replaced by the attribute getter applied to the category.
                              Background: During the compilation, the compiler resolves attributes occuring in the code and stores them in global variables
                              called `CAP_JIT_INTERNAL_GLOBAL_VARIABLE_n` (for integers `n` starting from 1). If these variables cannot be replaced,
                              the resulting code is only valid in the current session.
* `source_and_range_attributes_from_morphism_attribute`: a record with keys `object_attribute_name`, `morphism_attribute_name`, `source_attribute_getter_name`,
                                                         and `range_attribute_getter_name`. Replaces the attribute `object_attribute_name` of the source (resp. range)
                                                         of a morphism by `source_attribute_getter_name` (resp. `range_attribute_getter_name`) applied to
                                                         the attribute `morphism_attribute_name` of the morphism. Can be used if objects and morphisms can be
                                                         easily created from the morphism datum anyway. Note: Some simple expressions like integers are NOT replaced.
* `{category,object,morphism}_filter`: filters used for the data types of the category and its objects and morphisms.

Note: The compiler can only discover the hints if the category is the first argument of the function.

@Section Stopping the compiler at a certain level

You can use `StopCompilationAtCategory` to prevent the compiler from inlining and optimizing code of a given category.
You can revert this decision using `ContinueCompilationAtCategory`.

@Section Disabling the automatic inference of data types

@Section Compiling step-by-step

@Section Proof assistant mode

@Section Getting information about the compilation process

You can increase the info level of `InfoCapJit` to get information about the compilation process.

@Section FAQ

* Q: Where do the category attributes in the compiled code come from?
A: During compilation, attributes of categories are **resolved**, that is, their values are stored in global variables
without keeping track of which category they belong to. After the compilation, CompilerForCAP tries to replace those global variables again
by attributes registered via `category_attribute_names` to the current category (for details, see <Ref Sect="Section_CompilerHints" />).
If some attributes of the current category are categories themselves, their attributes are also taken into account (recursively).
In this case, if two categories `cat1` and `cat2` have attributes `Attr1` and `Attr2`, respectively, with the same value,
it is undefined whether `Attr1( cat1 )` or `Attr2( cat2 )` will be used. So even if only `Attr2( cat2 )` appeared in the original code,
`Attr1( cat1 )` might appear in the compiled code.

* Q: Why is my function not resolved?
A: The function might be listed in `CAP_JIT_NON_RESOLVABLE_GLOBAL_VARIABLE_NAMES` or it might be missing an annotation
with the pragma `CAP_JIT_RESOLVE_FUNCTION`. Additionally, a function can only be resolved
if it appears as a global variable in the tree during the resolving phase of the compilation. That is, it must be referenced from
a global variable from the beginning on, or after global variables are resolved by <Ref Func="CapJitResolvedGlobalVariables" />.
Possibly you have adapt <Ref Func="CapJitResolvedGlobalVariables" /> to your setting.

* Q: Why is do I get the error "a local variable with name &lt;name&gt; is assigned more than once (not as a part of a rapid reassignment),
  this is not supported"?
A: For reasons of correctness, variables cannot be inlined if a variable is assigned more than once in the body of a function
(this includes function arguments which are assigned at least once, namely when the function is called). An exception is made for
"rapid reassignments": if the same variable is assigned and then reassigned immediately in the next statement, this only counts
as a single assignment.

* Q: Why do I get one of the following errors: "tree includes statements or expressions which indicate possible side effects",
  "tree contains an assignment of a higher variable with initial name &lt;name&gt;, this is not supported", or
  "tree contains for loop over non-local variable, this is not supported" ?
A: We can only drop unused variables, inline variables, etc. if we assume that the code contains no side effects. Statements like
STAT_PROCCALL or assignment to higher variables cause (or at least indicate) side effects, so continuing with the compilation
would probably not lead to a correct result.

