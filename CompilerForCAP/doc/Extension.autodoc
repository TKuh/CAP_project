@Chapter Improving and extending the compiler

The easiest way to extend the compiler is by adding more logic to it, see <Ref Sect="Section_Logic" />. For writing logic functions
you also have to iterate over enhanced syntax trees, see <Ref Sect="Section_EnhancedSyntaxTrees" /> and <Ref Sect="Section_IterateOverTree" />.
You might also want to use available tools, see <Ref Sect="Section_Tools" />. If you want to improve an existing compilation step or add
a completely new one, see <Ref Sect="Section_CompilationSteps" />.

For debugging you can:
* use <Ref Func="ENHANCED_SYNTAX_TREE_CODE" /> to view the tree as GAP code (<C>ENHANCED_SYNTAX_TREE_CODE</C>( <A>tree</A> )),
* use <Ref Func="CapJitPrettyPrintSyntaxTree" /> to view the tree in a more readable formatting (<C>CapJitPrettyPrintSyntaxTree</C>( <A>tree</A> )),
* set `debug` to `true` in the code of <Ref Func="CapJitCompiledFunctionAsEnhancedSyntaxTree" />
  (Note: this causes informational break loops which are not actual errors),
* use the `debug` and `debug_path` record entries of logic templates (see <Ref Func="CapJitAddLogicTemplate" />).

@Section Logic
@SectionLabel Logic

@Section Enhanced syntax trees
@SectionLabel EnhancedSyntaxTrees

To simplify the handling of syntax trees, the CAP compiler enhances syntax trees in the following ways:
* Lists are transformed (in the expected way) into records of type SYNTAX_TREE_LIST with integer keys (and an additional key `length`).
* All node types starting with STAT_SEQ_STAT are replaced by STAT_SEQ_STAT.
* All node types starting with EXPR_FUNCCALL_ are replaced by EXPR_FUNCCALL.
* All node types starting with EXPR_PROCCALL_ are replaced by EXPR_PROCCALL.
* All node types starting with STAT_FOR are replaced by STAT_FOR.
* Nested STAT_SEQ_STATs are flattened.
* A final STAT_RETURN_VOID in functions is dropped.
* Branches of STAT_IF etc. are given the type BRANCH_IF.
* If the body of a BRANCH_IF is not a STAT_SEQ_STAT, the body is wrapped in a STAT_SEQ_STAT.
* The key-value pairs of EXPR_RECs are given the type REC_KEY_VALUE_PAIR.
* A globally unique ID is assigned to each function.
* Return statements are replaced by assignments to a special local variable "RETURN_VALUE".
* The handling of local variables and higher variables is unified by the concept of function variables:
  function variables (FVARs) reference local variables in functions via the function id (`func_id`) and
  their name (`name`), which is determined from the list of arguments/local variables of the function.
* All statements after `if ... then return ...; fi;` are moved into an `else` branch.
* The syntax tree types in `CAP_JIT_INTERNAL_SYNTAX_TREE_TO_OPERATION_TRANSLATIONS` (e.g. `EXPR_ELM_MAT`)
  are replaced by calls to corresponding operations (so that they do not require special handling).
* if/elif/else statements must all end with the assignment to the same local variable and must have an else clause.
  They are coded using a new type `EXPR_CASE`:
  Trees of type `EXPR_CASE` have a key `branches` which holds a list of trees of type `CASE_BRANCH`.
  Trees of type `CASE_BRANCH` have two keys `condition` and `value`, which get populated with the condition of the if branch and the
  right hand side of the last variable assignment in the body of the branch. Caution: The remaining statements in the body of the
  if branch are moved outside of the if/elif/else statement!
* Statements which are not assignments to local variables or if/else statements as well as nested if/else statements are not supported.
* `EXPR_FUNC`s are coded as `EXPR_DECLARATIVE_FUNC`s: The latter has not key `nloc` and no key `name`.
  Additionally, instead of `stats`, the latter has a key `bindings` of type `FVAR_BINDING_SEQ`.
  A syntax tree of type `FVAR_BINDING_SEQ` describes a set(!) of bindings (= assignments) of local variables.
  It has a key `names`, a list of bound names. Values of bindings can be added/obtained/unbound via
  `CapJitAddBinding`, `CapJitValueOfBinding`, and `CapJitUnbindBinding`.
  When the tree is converted to a function again, the set of bindings is endowed with a order which respects the relation "uses".
* Local variables must not be assigned more than once (this includes function arguments, which are assigned at least once,
  namely when the function is called). An exception is made for "rapid reassignments": if the same variable is assigned
  and then reassigned immediately in the next statement, the right-hand side of the first assignment is inserted
  into the right-hand side of the second assignment.

@Section Iterating over a syntax tree
@SectionLabel IterateOverTree

@Section Tools
@SectionLabel Tools

@Section Compilation steps
@SectionLabel CompilationSteps

