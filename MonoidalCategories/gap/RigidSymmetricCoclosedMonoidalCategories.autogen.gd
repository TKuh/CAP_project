# SPDX-License-Identifier: GPL-2.0-or-later
# MonoidalCategories: Monoidal and monoidal (co)closed categories
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecord.gi

#! @Chapter Monoidal Categories

#! @Section Add-methods

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CoRankMorphism`.
#! $F: ( a ) \mapsto \mathtt{CoRankMorphism}(a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCoRankMorphism",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCoRankMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCoRankMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCoRankMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `CoTraceMap`.
#! $F: ( alpha ) \mapsto \mathtt{CoTraceMap}(alpha)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddCoTraceMap",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddCoTraceMap",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddCoTraceMap",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddCoTraceMap",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromLeftInternalCoHomToTensorProductWithLeftCoDualObject`.
#! $F: ( a, b ) \mapsto \mathtt{IsomorphismFromLeftInternalCoHomToTensorProductWithLeftCoDualObject}(a, b)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddIsomorphismFromLeftInternalCoHomToTensorProductWithLeftCoDualObject",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddIsomorphismFromLeftInternalCoHomToTensorProductWithLeftCoDualObject",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddIsomorphismFromLeftInternalCoHomToTensorProductWithLeftCoDualObject",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddIsomorphismFromLeftInternalCoHomToTensorProductWithLeftCoDualObject",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `IsomorphismFromTensorProductWithLeftCoDualObjectToLeftInternalCoHom`.
#! $F: ( a, b ) \mapsto \mathtt{IsomorphismFromTensorProductWithLeftCoDualObjectToLeftInternalCoHom}(a, b)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddIsomorphismFromTensorProductWithLeftCoDualObjectToLeftInternalCoHom",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddIsomorphismFromTensorProductWithLeftCoDualObjectToLeftInternalCoHom",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddIsomorphismFromTensorProductWithLeftCoDualObjectToLeftInternalCoHom",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddIsomorphismFromTensorProductWithLeftCoDualObjectToLeftInternalCoHom",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCoclosedMonoidalCoevaluationForLeftCoDual`.
#! $F: ( a ) \mapsto \mathtt{LeftCoclosedMonoidalCoevaluationForLeftCoDual}(a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationForLeftCoDual",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationForLeftCoDual",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationForLeftCoDual",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationForLeftCoDual",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCoclosedMonoidalCoevaluationForLeftCoDualWithGivenTensorProduct`.
#! $F: ( s, a, r ) \mapsto \mathtt{LeftCoclosedMonoidalCoevaluationForLeftCoDualWithGivenTensorProduct}(s, a, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationForLeftCoDualWithGivenTensorProduct",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationForLeftCoDualWithGivenTensorProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationForLeftCoDualWithGivenTensorProduct",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationForLeftCoDualWithGivenTensorProduct",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftInternalCoHomTensorProductCompatibilityMorphismInverse`.
#! $F: ( list ) \mapsto \mathtt{LeftInternalCoHomTensorProductCompatibilityMorphismInverse}(list)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftInternalCoHomTensorProductCompatibilityMorphismInverse",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftInternalCoHomTensorProductCompatibilityMorphismInverse",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftInternalCoHomTensorProductCompatibilityMorphismInverse",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftInternalCoHomTensorProductCompatibilityMorphismInverse",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftInternalCoHomTensorProductCompatibilityMorphismInverseWithGivenObjects`.
#! $F: ( source, list, range ) \mapsto \mathtt{LeftInternalCoHomTensorProductCompatibilityMorphismInverseWithGivenObjects}(source, list, range)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftInternalCoHomTensorProductCompatibilityMorphismInverseWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftInternalCoHomTensorProductCompatibilityMorphismInverseWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftInternalCoHomTensorProductCompatibilityMorphismInverseWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftInternalCoHomTensorProductCompatibilityMorphismInverseWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismFromTensorProductToLeftInternalCoHom`.
#! $F: ( a, b ) \mapsto \mathtt{MorphismFromTensorProductToLeftInternalCoHom}(a, b)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddMorphismFromTensorProductToLeftInternalCoHom",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddMorphismFromTensorProductToLeftInternalCoHom",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddMorphismFromTensorProductToLeftInternalCoHom",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddMorphismFromTensorProductToLeftInternalCoHom",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismFromTensorProductToLeftInternalCoHomWithGivenObjects`.
#! $F: ( s, a, b, r ) \mapsto \mathtt{MorphismFromTensorProductToLeftInternalCoHomWithGivenObjects}(s, a, b, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddMorphismFromTensorProductToLeftInternalCoHomWithGivenObjects",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddMorphismFromTensorProductToLeftInternalCoHomWithGivenObjects",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddMorphismFromTensorProductToLeftInternalCoHomWithGivenObjects",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddMorphismFromTensorProductToLeftInternalCoHomWithGivenObjects",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismToLeftCoBidual`.
#! $F: ( a ) \mapsto \mathtt{MorphismToLeftCoBidual}(a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddMorphismToLeftCoBidual",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddMorphismToLeftCoBidual",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddMorphismToLeftCoBidual",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddMorphismToLeftCoBidual",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismToLeftCoBidualWithGivenLeftCoBidual`.
#! $F: ( a, r ) \mapsto \mathtt{MorphismToLeftCoBidualWithGivenLeftCoBidual}(a, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddMorphismToLeftCoBidualWithGivenLeftCoBidual",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddMorphismToLeftCoBidualWithGivenLeftCoBidual",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddMorphismToLeftCoBidualWithGivenLeftCoBidual",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddMorphismToLeftCoBidualWithGivenLeftCoBidual",
                  [ IsCapCategory, IsList ] );
